from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import ttest_ind

# set filepaths
base_filepath = Path.cwd()
dpll_filepath = base_filepath / 'dpll.csv'
jw_os_filepath = base_filepath / 'jw_os.csv'
jw_ts_filepath = base_filepath / 'jw_ts.csv'
bohm_filepath = base_filepath / 'bohm.csv'
dlis_filepath = base_filepath / 'dlis.csv'

# read the results into numpy arrays
dpll = np.genfromtxt(dpll_filepath, delimiter=',')
jw_os = np.genfromtxt(jw_os_filepath, delimiter=',')
jw_ts = np.genfromtxt(jw_ts_filepath, delimiter=',')
bohm = np.genfromtxt(bohm_filepath, delimiter=',')
dlis = np.genfromtxt(dlis_filepath, delimiter=',')

# concat the results for easy processing
results = [dpll, jw_os, jw_ts, bohm, dlis]
results_names = ['Vanilla DPLL', 'JW One-sided', 'JW Two-sided', 'Bohm', 'DLIS']

# summary statistics
print('Summary statistics')
for i in range(len(results)):
    result = results[i]
    print(results_names[i])
    print(f'  Min     : {int(np.amin(result))}')
    print(f'  Median  : {int(np.median(result))}')
    print(f'  Max     : {int(np.amax(result))}')
    print(f'  Mean    : {np.mean(result)}')
    print(f'  Variance: {np.var(result)}')
    print()

# welch's t-test
print()
print("Welch's t-test")
print(f'{" ":12} ', end=' ')
for i in range(len(results_names)):
    if i < len(results) - 1:
        print(f'{results_names[i]:21}', end=' ')
    else:
        print(f'{results_names[i]:21}')

for i in range(len(results)):
    print(f'{results_names[i]:12} ', end=' ')
    for j in range(len(results)):
        if i == j:
            print(f'{"/":^21}', end=' ')
        elif j < len(results) - 1:
            print(f'{ttest_ind(results[i], results[j], equal_var=False)[1] / 2:21}', end=' ')
        else:
            print(f'{ttest_ind(results[i], results[j], equal_var=False)[1] / 2:21}')

print()
print("Welch's t-test")
print(f'{" ":12} ', end=' ')
for i in range(len(results_names)):
    if i < len(results) - 1:
        print(f'{results_names[i]:21}', end=' ')
    else:
        print(f'{results_names[i]:21}')

for i in range(len(results)):
    print(f'{results_names[i]:12} ', end=' ')
    for j in range(len(results)):
        if i == j:
            print(f'{"/":^21}', end=' ')
        elif j < len(results) - 1:
            print(f'{ttest_ind(results[i], results[j], equal_var=False)[0]:21}', end=' ')
        else:
            print(f'{ttest_ind(results[i], results[j], equal_var=False)[0]:21}')

counts_distribution = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 32, 32, 32, 5, 4, 4, 4, 4, 4, 4, 4, 32, 4, 4, 32, 5, 4, 32, 4, 4, 32, 4, 4, 4, 4, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 4, 4, 32, 4, 5, 32, 4, 4, 32, 4, 4, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 4, 4, 32, 4, 4, 32, 4, 32, 4, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 4, 4, 32, 4, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 4, 32, 4, 4, 32, 32, 4, 4, 32, 32, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 4, 4, 32, 32, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 32, 4, 4, 32, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 32, 32, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 32, 4, 4, 4, 4, 32, 32, 4, 4, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 32, 5, 4, 32, 4, 4, 4, 32, 32, 4, 4, 4, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 32, 32, 4, 32, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 32, 4, 4, 4, 4, 32, 32, 4, 4, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 5, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 32, 4, 4, 32, 4, 4, 32, 32, 4, 4, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 32, 32, 4, 4, 32, 4, 4, 32, 32, 4, 4, 32, 32, 4, 4, 4, 4, 4, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 4, 4, 32, 32, 4, 32, 4, 32, 32, 4, 32, 4, 32, 32, 4, 4, 4, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 5, 4, 4, 4, 32, 32, 4, 32, 4, 32, 32, 4, 32, 32, 4, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 32, 32, 4, 32, 32, 4, 32, 32, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 32, 32, 4, 32, 32, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 32, 4, 32, 32, 32, 4, 32, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 32, 32, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 4, 4, 4, 32, 4, 4, 4, 32, 4, 4, 32, 4, 4, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 32, 4, 4, 32, 4, 4, 32, 4, 32, 4, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 32, 4, 4, 32, 4, 32, 4, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 4, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 5, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 4, 4, 32, 32, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 32, 4, 4, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 32, 4, 4, 4, 5, 32, 32, 4, 4, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 5, 4, 4, 4, 32, 4, 4, 32, 4, 4, 32, 32, 4, 4, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 32, 32, 4, 4, 4, 32, 4, 5, 32, 4, 32, 32, 4, 4, 4, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 32, 4, 4, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 32, 4, 4, 32, 4, 5, 32, 32, 4, 4, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 32, 32, 4, 4, 32, 4, 4, 32, 32, 4, 4, 32, 32, 4, 4, 4, 4, 4, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 4, 4, 32, 32, 4, 4, 32, 32, 4, 4, 32, 32, 4, 4, 4, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32, 5, 32, 32, 4, 4, 32, 32, 4, 32, 4, 32, 32, 4, 32, 4, 32, 32, 4, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 32, 32, 4, 32, 32, 5, 32, 32, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 32, 32, 4, 32, 32, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 32, 4, 4, 4, 4, 4, 4, 32, 32, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 4, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32]
num_bins = 40
n, bins, patches = plt.hist(counts_distribution, num_bins, facecolor='blue', alpha=0.5)
plt.xlabel('Frequency of occurence')
plt.ylabel('Number of literals')
# plt.title('Histogram of literal counts per clause')
plt.grid(True)

plt.show()
